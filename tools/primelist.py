#Simple python script to generate static C++ table of prime numbers
#First argument should be decimal number, the number of primes to generate

import math
import sys

h_file_name="primes.hpp"
c_file_name="primes.cpp"

num_primes = int(sys.argv[1])
print("Generating static prime numbers array...")

h_file = open(h_file_name,"w")
h_file.write("/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */\n")
h_file.write("#ifndef _PRIMES_HPP_\n")
h_file.write("#define _PRIMES_HPP_\n")
h_file.write("\n")
h_file.write("#include <cstdint>\n")
h_file.write("\n")
h_file.write("#define NUM_PRIMES " + str(num_primes) + "\n")
h_file.write("extern const uint64_t primes[NUM_PRIMES];\n")
h_file.write("\n")
h_file.write("#endif\n")
h_file.close()

c_file = open(c_file_name,"w")
c_file.write("/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */\n")
c_file.write("#include \"primes.hpp\"\n")
c_file.write("\n")
c_file.write("const uint64_t primes[NUM_PRIMES] =\n")
c_file.write("{\n")

count = 0;
prime = 1;
while(count < num_primes):
    prime = prime + 1
    is_prime = True
    for i in range(2, math.ceil(math.sqrt(prime))+1):
        if (prime % i) == 0:
            is_prime = False
            break
    if is_prime or prime == 2:
        c_file.write("  " + hex(prime) + ",\n")
        count = count + 1

c_file.write("};\n")
c_file.close()
